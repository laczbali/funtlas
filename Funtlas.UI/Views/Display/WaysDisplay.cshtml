@using System.Globalization;
@using Funtlas.UI.Models.View;

<div id="map"></div>

@model WaysDisplay

@{
    Layout = "/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <style>
        #map {
            height: 600px;
        }
    </style>
}

@section Scripts
{
	@* https://github.com/Zverik/leaflet-grayscale *@
    <script>
		L.TileLayer.Grayscale = L.TileLayer.extend({
			options: {
				quotaRed: 21,
				quotaGreen: 71,
				quotaBlue: 8,
				quotaDividerTune: 0,
				quotaDivider: function () {
					return this.quotaRed + this.quotaGreen + this.quotaBlue + this.quotaDividerTune;
				}
			},

			initialize: function (url, options) {
				options = options || {}
				options.crossOrigin = true;
				L.TileLayer.prototype.initialize.call(this, url, options);

				this.on('tileload', function (e) {
					this._makeGrayscale(e.tile);
				});
			},

			_createTile: function () {
				var tile = L.TileLayer.prototype._createTile.call(this);
				tile.crossOrigin = "Anonymous";
				return tile;
			},

			_makeGrayscale: function (img) {
				if (img.getAttribute('data-grayscaled'))
					return;

				img.crossOrigin = '';
				var canvas = document.createElement("canvas");
				canvas.width = img.width;
				canvas.height = img.height;
				var ctx = canvas.getContext("2d");
				ctx.drawImage(img, 0, 0);

				var imgd = ctx.getImageData(0, 0, canvas.width, canvas.height);
				var pix = imgd.data;
				for (var i = 0, n = pix.length; i < n; i += 4) {
					pix[i] = pix[i + 1] = pix[i + 2] = (this.options.quotaRed * pix[i] + this.options.quotaGreen * pix[i + 1] + this.options.quotaBlue * pix[i + 2]) / this.options.quotaDivider();
				}
				ctx.putImageData(imgd, 0, 0);
				img.setAttribute('data-grayscaled', true);
				img.src = canvas.toDataURL();
			}
		});

		L.tileLayer.grayscale = function (url, options) {
			return new L.TileLayer.Grayscale(url, options);
		};
    </script>

    <script>
        // create map
        var map = L.map('map');
		L.tileLayer.grayscale('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>',
			fadeAnimation: false
        }).addTo(map);

        // create polylines to display
        var lines = [];
        @{
            foreach (var way in Model.Ways)
            {
                var arrPushStr = "lines.push(" + way.ToJsObjectString() + ");";
                @Html.Raw(arrPushStr)
                ;
            }
        }

        lines.forEach(function (line) {
            L.polyline(line.points, { color: line.color }).addTo(map);
        });

        // zoom the map
        @{
            var bounds = Model.GetBounds().Select(p => p.ToJsArrayString());
            var boundsString = $"[{string.Join(", ", bounds)}]";
            @Html.Raw($"map.fitBounds({boundsString});")
        }
    </script>
}
